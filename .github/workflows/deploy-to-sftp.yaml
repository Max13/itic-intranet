name: Deploy to SFTP

on:
  push:
    branches: master
  workflow_dispatch:

env:
  ACCOUNT_TOKEN: ${{ secrets.ACCOUNT_TOKEN }}
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SERVER_SSH_PORT: ${{ secrets.SERVER_SSH_PORT }}
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SERVER_WEB_USER: ${{ secrets.SERVER_WEB_USER }}
  SERVER_BASE_PATH: ${{ secrets.SERVER_BASE_PATH }}
  SERVER_DATA_PATH:
  SERVER_DATABASE_PATH:
  SERVER_RELEASES_PATH:
  SERVER_RELEASE_PATH:
  SERVER_STORAGE_PATH:

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-20.04
    environment: ITIC Intra
    steps:

      - name: Set env
        run: |
          SERVER_DATA_PATH="$SERVER_BASE_PATH/data"
          SERVER_DATABASE_PATH="$SERVER_DATA_PATH/database"
          SERVER_RELEASES_PATH="$SERVER_BASE_PATH"
          SERVER_RELEASE_PATH="$SERVER_RELEASES_PATH/$(date +%s)"
          SERVER_STORAGE_PATH="$SERVER_DATA_PATH/storage"

          echo "SERVER_DATA_PATH=$SERVER_DATA_PATH" >> $GITHUB_ENV
          echo "SERVER_DATABASE_PATH=$SERVER_DATABASE_PATH" >> $GITHUB_ENV
          echo "SERVER_RELEASES_PATH=$SERVER_RELEASES_PATH" >> $GITHUB_ENV
          echo "SERVER_RELEASE_PATH=$SERVER_RELEASE_PATH" >> $GITHUB_ENV
          echo "SERVER_STORAGE_PATH=$SERVER_STORAGE_PATH" >> $GITHUB_ENV

          sudo update-alternatives --set php /usr/bin/php7.4

      - uses: actions/checkout@v4

      - name: Install composer dependencies
        run: |
          composer config github-oauth.github.com $ACCOUNT_TOKEN
          APP_URL=http://localhost DB_CONNECTION=sqlite DB_DATABASE=':memory:' composer install --prefer-dist --no-progress --no-dev
          composer config repositories.ypareo-auth vcs https://github.com/Max13/php-ypareauth.git
          APP_URL=http://localhost DB_CONNECTION=sqlite DB_DATABASE=':memory:' composer require max13/php-ypareauth:^1.0

      - name: Install npm dependencies
        run: npm install

      - name: Build website
        run: npm run production

      - name: Add ssh key to container
        env:
          SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SERVER_SSH_KEY" > ~/.ssh/id_rsa
          cat << EOF > ~/.ssh/config
            Host $SERVER_HOST
              StrictHostKeyChecking no
          EOF
          chmod 400 ~/.ssh/*

      - name: Create destination directories in server
        run: ssh -i ~/.ssh/id_rsa -p $SERVER_SSH_PORT $SERVER_USER@$SERVER_HOST "mkdir -p \"$SERVER_RELEASES_PATH\" \"SERVER_DATABASE_PATH\" \"SERVER_STORAGE_PATH\""

      - name: Upload build to server
        run: rsync -rze "ssh -i ~/.ssh/id_rsa -p $SERVER_SSH_PORT" . $SERVER_USER@$SERVER_HOST:"$SERVER_RELEASE_PATH"

      - name: Deploy
        run: |
          ssh -i ~/.ssh/id_rsa -p $SERVER_SSH_PORT $SERVER_USER@$SERVER_HOST << EOS
            echo "Linking .env to release"
            ln -sfnr "$SERVER_DATA_PATH/.env" "$SERVER_RELEASE_PATH/"

            echo "Linking database to release"
            ln -sfnr "$SERVER_DATABASE_PATH/database.sqlite" "$SERVER_RELEASE_PATH/database/"
            
            echo "Linking storage directory to release"
            rm -r "$SERVER_RELEASE_PATH/storage/app" && ln -sfnr "$SERVER_STORAGE_PATH/app" "$SERVER_RELEASE_PATH/storage/"

            echo "Linking release directory to current"
            ln -sfnr "$SERVER_RELEASE_PATH" "$SERVER_BASE_PATH/current"
          
            echo "Change ownership"
            chown -hR $SERVER_WEB_USER:$SERVER_WEB_USER "$SERVER_RELEASES_PATH"

            echo "Cleaning up old releases"
            ls -1d -- "$SERVER_RELEASES_PATH"/* | sort -rg | tail -n +7 | xargs /bin/rm -rf --
          EOS
